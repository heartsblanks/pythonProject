import os
import xml.etree.ElementTree as ET
import pandas as pd

def update_classpath_and_project(repo_path, project_mapping, mig_projects, application):
    try:
        for project in project_mapping:
            iib_project_name = project.get('IIB_PROJECT_NAME')
            ace_project_name = project.get('ACE_PROJECT_NAME')
            if not iib_project_name or not ace_project_name:
                continue

            # Read and parse the .project file for the current project
            project_dir = os.path.join(repo_path, iib_project_name)
            project_file_path = os.path.join(project_dir, ".project")
            
            try:
                tree = ET.parse(project_file_path)
                root = tree.getroot()
            except ET.ParseError as parse_error:
                print(f"Failed to parse XML for project {iib_project_name}: {parse_error}")
                continue
            except FileNotFoundError:
                print(f"No .project file found for project {iib_project_name}")
                continue

            # Ensure the <projects> tag exists
            projects_tag = root.find('projects')
            if projects_tag is None:
                print(f"Warning: No <projects> tag found in {project_file_path}")
                continue  # Skip to the next project if <projects> is missing

            project_updated = False

            # Update dependencies in the .project file
            for dep_project in projects_tag.findall('project'):
                dep_text = dep_project.text
                project_found = False

                # Check if the dependency is in project_mapping
                for project_map in project_mapping:
                    if dep_text == project_map["IIB_PROJECT_NAME"] and dep_text != iib_project_name:
                        dep_project.text = project_map["ACE_PROJECT_NAME"]
                        project_updated = True
                        project_found = True
                        break

                # If the dependency was not found in project_mapping, check in mig_projects
                if not project_found and dep_text != iib_project_name:
                    mig_project_row = mig_projects.loc[mig_projects['OLD_NAME'] == dep_text, 'NEW_NAME']
                    if not mig_project_row.empty:
                        dep_project.text = mig_project_row.values[0]
                        project_updated = True
                    else:
                        print(f"Warning: No NEW_NAME found in mig_projects for OLD_NAME '{dep_text}'")

            # Add missing ACE project dependencies if they aren't in the current <projects> section
            for project_map in project_mapping:
                if project_map["IIB_PROJECT_NAME"] != iib_project_name:
                    ace_dep_name = project_map["ACE_PROJECT_NAME"]
                    existing_dep = any(dep.text == ace_dep_name for dep in projects_tag.findall('project'))
                    if not existing_dep:
                        new_dep_proj = ET.SubElement(projects_tag, "project")
                        new_dep_proj.text = ace_dep_name
                        project_updated = True

            # Write updates to the .project file if changes were made
            if project_updated:
                try:
                    tree.write(project_file_path, encoding='utf-8', xml_declaration=True, method='xml', short_empty_elements=True)
                    print(f"Successfully wrote updates to {project_file_path}.")
                except Exception as e:
                    print(f"Error writing to {project_file_path}: {e}")

            # Check for the .classpath file in the project directory
            classpath_file_path = os.path.join(project_dir, ".classpath")
            if os.path.exists(classpath_file_path):
                classpath_updated = False
                try:
                    classpath_tree = ET.parse(classpath_file_path)
                    classpath_root = classpath_tree.getroot()

                    # Find <classpathentry> elements with a path attribute that starts with "/"
                    for entry in classpath_root.findall('classpathentry'):
                        path_attr = entry.get('path')
                        if path_attr and path_attr.startswith('/'):
                            print(f"Found <classpathentry> with path starting with '/': {path_attr} in {classpath_file_path}")
                            
                            # Check if the path_attr matches any IIB_PROJECT_NAME in project_mapping
                            for project_map in project_mapping:
                                if path_attr == f"/{project_map['IIB_PROJECT_NAME']}":
                                    entry.set('path', f"/{project_map['ACE_PROJECT_NAME']}")
                                    classpath_updated = True
                                    print(f"Replaced {path_attr} with /{project_map['ACE_PROJECT_NAME']}")

                            # If still unchanged, check if path_attr matches any OLD_NAME in mig_projects
                            if not classpath_updated:
                                mig_project_row = mig_projects.loc[mig_projects['OLD_NAME'] == path_attr[1:], 'NEW_NAME']
                                if not mig_project_row.empty:
                                    new_name = mig_project_row.values[0]
                                    entry.set('path', f"/{new_name}")
                                    classpath_updated = True
                                    print(f"Replaced {path_attr} with /{new_name}")

                    # Write the updated .classpath file if changes were made
                    if classpath_updated:
                        classpath_tree.write(classpath_file_path, encoding='utf-8', xml_declaration=True, method='xml', short_empty_elements=True)
                        print(f"Successfully updated .classpath file for {iib_project_name}")

                except ET.ParseError as parse_error:
                    print(f"Failed to parse .classpath file for project {iib_project_name}: {parse_error}")
                except FileNotFoundError:
                    print(f"No .classpath file found for project {iib_project_name}")

    except Exception as e:
        print(f"Unexpected error in update_classpath_and_project: {e}")