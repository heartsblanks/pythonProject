pipeline {
    agent any

    environment {
        GIT_REPO = "https://<GITHUB_ENTERPRISE_URL>/<organization>/<repository>.git"
        GITHUB_TOKEN = credentials('github-token') // GitHub token stored in Jenkins credentials
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out code from branch: ${env.BRANCH_NAME}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${env.BRANCH_NAME}"]],
                        userRemoteConfigs: [[
                            url: "${GIT_REPO}",
                            credentialsId: 'github-token'
                        ]]
                    ])
                }
            }
        }

        stage('Detect PR Merge to Master') {
            when {
                allOf {
                    branch 'master'
                    expression { return env.CHANGE_ID != null && env.CHANGE_TARGET == 'master' }
                }
            }
            steps {
                script {
                    echo "Pull request merged into master detected."
                }
            }
        }

        stage('Determine Tag Version') {
            when {
                branch 'master'
            }
            steps {
                script {
                    // Fetch the latest tag
                    def latestTag = sh(script: "git describe --tags `git rev-list --tags --max-count=1` || echo 'v0.0.0'", returnStdout: true).trim()
                    def versionParts = latestTag.replace('v', '').split('\\.')
                    def major = versionParts[0].toInteger()
                    def minor = versionParts[1].toInteger()
                    def patch = versionParts[2].toInteger()

                    // Increment major version for PR merges
                    echo "Incrementing major version for pull request merge."
                    major += 1
                    minor = 0
                    patch = 0

                    // Set the release version
                    env.RELEASE_VERSION = "v${major}.${minor}.${patch}"
                    echo "Determined major version: ${env.RELEASE_VERSION}"
                }
            }
        }

        stage('Tag and Push Major Version') {
            when {
                branch 'master'
            }
            steps {
                script {
                    echo "Tagging master branch with version ${env.RELEASE_VERSION}"

                    // Configure Git user
                    sh """
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@example.com"
                        git tag -a ${env.RELEASE_VERSION} -m "Major version release ${env.RELEASE_VERSION}"
                        git push origin ${env.RELEASE_VERSION}
                    """
                    echo "Major version tag ${env.RELEASE_VERSION} pushed successfully."
                }
            }
        }
    }

    post {
        success {
            echo "Build succeeded for branch: ${env.BRANCH_NAME}"
        }
        failure {
            echo "Build failed for branch: ${env.BRANCH_NAME}"
        }
    }
}