pipeline {
    agent any

    environment {
        GIT_REPO = "git@<GITHUB_ENTERPRISE_HOST>:<organization>/<repository>.git"
        GITHUB_TOKEN = credentials('github-token') // GitHub token stored in Jenkins credentials
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Checking out code from branch: ${env.BRANCH_NAME}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${env.BRANCH_NAME}"]],
                        userRemoteConfigs: [[
                            url: "${GIT_REPO}",
                            credentialsId: 'github-ssh-key' // SSH credentials ID
                        ]]
                    ])
                }
            }
        }

        stage('Determine Tag Version') {
    steps {
        script {
            // Fetch the latest tag and sanitize it
            def latestTag = sh(script: "git describe --tags `git rev-list --tags --max-count=1` || echo 'v0.0.0'", returnStdout: true).trim()
            def sanitizedTag = latestTag.replaceAll(/-[a-zA-Z0-9.-]+$/, '')
            def versionParts = sanitizedTag.replace('v', '').split('\\.')
            def major = versionParts[0].toInteger()
            def minor = versionParts[1].toInteger()
            def patch = versionParts[2].toInteger()

            // Unique identifier for -DEV or -SNAPSHOT tags
            def uniqueSuffix = "${env.BUILD_NUMBER}-${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}"

            if (env.BRANCH_NAME == 'master') {
                if (env.CHANGE_ID != null && env.CHANGE_TARGET == 'master') {
                    echo "Pull request merged into master detected. Incrementing major version."
                    major += 1
                    minor = 0
                    patch = 0
                } else if (currentBuild.getBuildCauses().any { it instanceof hudson.triggers.SCMTrigger$SCMTriggerCause }) {
                    echo "Commit to master detected. Incrementing minor version."
                    minor += 1
                }
            } else if (env.BRANCH_NAME.startsWith('hotfix/')) {
                echo "Hotfix branch detected. Incrementing patch version."
                patch += 1
            } else if (env.BRANCH_NAME.startsWith('feature/') || env.BRANCH_NAME == 'testing') {
                echo "Feature or testing branch detected. Using snapshot version."
                env.RELEASE_VERSION = "v${major}.${minor}.${patch}-${env.BRANCH_NAME.replaceAll('/', '-')}-${uniqueSuffix}"
                return
            } else {
                echo "Other branch detected. Using development version."
                env.RELEASE_VERSION = "v${major}.${minor}.${patch}-DEV-${uniqueSuffix}"
                return
            }

            env.RELEASE_VERSION = "v${major}.${minor}.${patch}"
            echo "Determined release version: ${env.RELEASE_VERSION}"
        }
    }
}

        stage('Generate Release Notes') {
            when {
                expression { env.CHANGE_ID != null && env.CHANGE_TARGET == 'master' }
            }
            steps {
                script {
                    def previousTag = sh(script: "git describe --tags `git rev-list --tags --max-count=1` || echo 'v0.0.0'", returnStdout: true).trim()
                    echo "Previous tag: ${previousTag}"

                    // Collect commits since the last tag
                    def releaseNotes = sh(script: """
                        git log ${previousTag}..HEAD --pretty=format:'- %s (%h)' | tee release-notes.txt
                    """, returnStdout: true).trim()

                    if (releaseNotes) {
                        echo "Generated release notes:\n${releaseNotes}"
                        env.RELEASE_NOTES = releaseNotes
                    } else {
                        error("No commits found for release notes.")
                    }
                }
            }
        }

        stage('Tag and Push') {
            steps {
                script {
                    echo "Tagging branch ${env.BRANCH_NAME} with version ${env.RELEASE_VERSION}"
                    sh """
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@example.com"
                        git tag -a ${env.RELEASE_VERSION} -m "Tagging branch ${env.BRANCH_NAME} with version ${env.RELEASE_VERSION}"
                        git push origin ${env.RELEASE_VERSION}
                    """
                    echo "Tag ${env.RELEASE_VERSION} pushed for branch ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Create GitHub Release') {
            when {
                expression { env.CHANGE_ID != null && env.CHANGE_TARGET == 'master' }
            }
            steps {
                script {
                    echo "Creating GitHub release for version ${env.RELEASE_VERSION}"

                    def response = httpRequest(
                        httpMode: 'POST',
                        url: "https://<GITHUB_ENTERPRISE_HOST>/api/v3/repos/<organization>/<repository>/releases",
                        customHeaders: [[name: 'Authorization', value: "token ${env.GITHUB_TOKEN}"]],
                        contentType: 'APPLICATION_JSON',
                        requestBody: """
                            {
                                "tag_name": "${env.RELEASE_VERSION}",
                                "target_commitish": "master",
                                "name": "${env.RELEASE_VERSION}",
                                "body": "${env.RELEASE_NOTES}",
                                "draft": false,
                                "prerelease": false
                            }
                        """
                    )

                    echo "GitHub release created: ${response.content}"
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}